#!/usr/bin/bash
#
# {{{ CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END }}}
#
# Copyright 2017 OmniTI Computer Consulting, Inc.  All rights reserved.
# Copyright 2018 OmniOS Community Edition (OmniOSce) Association.
# Use is subject to license terms.
#
. ../../lib/functions.sh

PROG=nss
VER=3.37
# Include NSPR version since we're downloading a combined tarball.
NSPRVER=4.19
# But set BUILDDIR to just be the NSS version.
BUILDDIR=$PROG-$VER
VERHUMAN=$VER
PKG=$PROG ##IGNORE##
SUMMARY="Overridden for each package below"
DESC="$SUMMARY"

# NOTE: These are generated by uname and build variables.
# CHECK THESE WHEN THINGS CHANGE!
DIST32=SunOS5.11_i86pc_gcc_OPT.OBJ
DIST64=SunOS5.11_i86pc_gcc_64_OPT.OBJ

BUILD_DEPENDS_IPS="library/nspr/header-nspr"

MAKE_OPTS="
    BUILD_OPT=1
    NS_USE_GCC=1
    NO_MDUPDATE=1
    NSDISTMODE=copy
    XCFLAGS=-g
"

NSS_LIBS="libfreebl3.so libnss3.so libnssckbi.so libnssdbm3.so
          libnssutil3.so libsmime3.so libsoftokn3.so libssl3.so"
NSPR_LIBS="libnspr4.so libplc4.so libplds4.so"
NSS_BINS="certutil"
NSPR_BINS=

NSPR_SAVE="$TMPDIR/nspr-save.$$"

export CC

make_clean() {
    # Assume PWD == top-level with nss & nspr subdirs.
    /bin/rm -rf dist
    pushd nss >/dev/null || logerr "pushd nss"
    logcmd gmake $MAKE_OPTS nss_clean_all || logerr "Can't make clean"
    popd >/dev/null
}

configure32() {
    # Get the install/prototype path out of the way now.
    logcmd mkdir -p $DESTDIR/usr/lib/mps \
        || logerr "Failed to create NSS install directory."
}

make_prog32() {
    cd nss || logerr "cd nss"
    logcmd gmake $MAKE_OPTS nss_build_all || logerr "build failed"
    cd ..
}

make_install32() {
    logmsg "Installing libraries (32)"
    for lib in $TGT_LIBS; do
        logcmd cp $TMPDIR/$BUILDDIR/dist/$DIST32/lib/$lib \
            $DESTDIR/usr/lib/mps/$lib
    done
    logmsg "Installing headers"
    logcmd mkdir -p $DESTDIR/usr/include/mps \
        || logerr "Failed to create NSS header install directory."
    logcmd cp $TMPDIR/$BUILDDIR/dist/public/nss/* $DESTDIR/usr/include/mps/
    logcmd cp $TMPDIR/$BUILDDIR/dist/public/dbm/* $DESTDIR/usr/include/mps/

    # Save 32-bit NSPR dist off for NSPR build.
    mkdir $NSPR_SAVE
    for lib in $NSPR_LIBS; do
        logcmd cp $TMPDIR/$BUILDDIR/dist/$DIST32/lib/$lib $NSPR_SAVE
    done
    cp $TMPDIR/$BUILDDIR/nspr/$DIST32/config/nspr.pc $NSPR_SAVE

    logmsg "Installing binaries (32)"
    mkdir -p $DESTDIR/usr/bin/i386
    for bin in $TGT_BINS; do
        logcmd cp $TMPDIR/$BUILDDIR/dist/$DIST32/bin/$bin \
            $DESTDIR/usr/bin/i386/$bin
        logcmd elfedit -e 'dyn:runpath /usr/lib/mps' \
            $DESTDIR/usr/bin/i386/$bin
    done
}

configure64() {
    # Get the install/prototype path out of the way now.
    logcmd mkdir -p $DESTDIR/usr/lib/mps/amd64 \
        || logerr "Failed to create NSS install directory."
}

make_prog64() {
    pushd nss >/dev/null || logerr "pushd nss"
    logcmd gmake $MAKE_OPTS USE_64=1 nss_build_all || logerr "build failed"
    popd >/dev/null
}

make_install64() {
    logmsg "Installing libraries (64)"
    for lib in $TGT_LIBS; do
        logcmd cp $TMPDIR/$BUILDDIR/dist/$DIST64/lib/$lib \
            $DESTDIR/usr/lib/mps/amd64/$lib
    done
    logmsg "Installing binaries (64)"
    mkdir -p $DESTDIR/usr/bin/amd64
    for bin in $TGT_BINS; do
        logcmd cp $TMPDIR/$BUILDDIR/dist/$DIST64/bin/$bin \
            $DESTDIR/usr/bin/amd64/$bin
        logcmd elfedit -e 'dyn:runpath /usr/lib/mps/amd64' \
            $DESTDIR/usr/bin/amd64/$bin
    done
}

secv1_links() {
    logcmd ln -s amd64 $DESTDIR/usr/lib/mps/64
    logcmd mkdir -p $DESTDIR/usr/lib/mps/secv1/amd64
    logcmd ln -s amd64 $DESTDIR/usr/lib/mps/secv1/64
    logcmd mkdir -p $DESTDIR/usr/lib/pkgconfig
    sed < $SRCDIR/files/$PC_FILE \
        > $DESTDIR/usr/lib/pkgconfig/`basename $PC_FILE` "
        s/__NSSVER__/$VER/g
        s/__NSPRVER__/$NSPRVER/g
    "
    for lib in $TGT_LIBS; do
        ln -s ../../amd64/$lib $DESTDIR/usr/lib/mps/secv1/amd64/$lib
        ln -s ../$lib $DESTDIR/usr/lib/mps/secv1/$lib
    done
}

init
download_source $PROG $PROG "$VER-with-nspr-$NSPRVER"
patch_source

###########################################################################
# NSS

LOCAL_MOG_FILE=nss-local.mog
TGT_LIBS=$NSS_LIBS
TGT_BINS=$NSS_BINS
PC_FILE=nss.pc

prep_build
build
secv1_links
make_isa_stub

###########################################################################
# system/library/mozilla-nss/headers-nss

PKG=system/library/mozilla-nss/header-nss
SUMMARY="Network Security Services Headers"
DESC="$SUMMARY"
make_package header-nss.mog

###########################################################################
# system/library/mozilla-nss

PKG=system/library/mozilla-nss
SUMMARY="Network Security Services Libraries/Utilities"
DESC="$SUMMARY"
make_package nss.mog

###########################################################################
# Clean up NSS.

clean_up

###########################################################################
# library/nspr/header-nspr

PKG=library/nspr/header-nspr
SUMMARY="Netscape Portable Runtime Headers"
DESC="$SUMMARY"

VER=$NSPRVER
TGT_LIBS=$NSPR_LIBS
TGT_BINS=$NSPR_BINS
PC_FILE=nspr.pc
LOCAL_MOG_FILE=nspr-local.mog
DESTDIR=${DESTDIR/nss/nspr}

prep_build

for dir in md obsolete private pkgconfig; do
    logcmd mkdir -p $DESTDIR/usr/include/mps/$dir \
        || logerr "Failed to create NSPR header install $dir directory."
done

for dir in amd64 pkgconfig amd64/pkgconfig; do
    logcmd mkdir -p $DESTDIR/usr/lib/mps/$dir \
        || logerr "Failed to create NSPR install $dir directory."
done

make_install64

for dir in "" obsolete private; do
    logcmd cp \
        $TMPDIR/$BUILDDIR/dist/$DIST64/include/$dir/*.h \
        $DESTDIR/usr/include/mps/$dir \
        || logerr "Failed to copy $dir header files"
done

logcmd cp \
    $TMPDIR/$BUILDDIR/dist/$DIST64/include/md/*.cfg \
    $DESTDIR/usr/include/mps/md \
    || logerr "Failed to copy md/ cfg files"

make_package header-nspr.mog

###########################################################################
# library/nspr

PKG=library/nspr
SUMMARY="Netscape Portable Runtime"
DESC="$SUMMARY"

logcmd cp $TMPDIR/$BUILDDIR/nspr/$DIST64/config/nspr.pc \
    $DESTDIR/usr/lib/mps/amd64/pkgconfig \
    || logerr "Failed to copy pkgconfig"

# Restore 32-bit NSPR libraries.
logcmd cp $NSPR_SAVE/nspr.pc $DESTDIR/usr/lib/mps/pkgconfig/nspr.pc
logcmd cp $NSPR_SAVE/*.so $DESTDIR/usr/lib/mps \
    || logerr "32-bit NSPR library installation failure"
logcmd rm -rf $NSPR_SAVE

secv1_links

make_package nspr.mog

###########################################################################

# This cleans up NSPR.
clean_up

# Vim hints
# vim:ts=4:sw=4:et:fdm=marker
