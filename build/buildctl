#!/usr/bin/bash

NOBANNER=1
batch_flag=""
lint_flag=""
if [ "${BATCH}" = 1 ]; then
    echo "Enabling batch mode."
    batch_flag="-b"
fi
. ../lib/functions.sh

# targets maps any valid package name to its full package name.
declare -A targets
# fulltargets maps full package names to their build script.
declare -A fulltargets
# list of packages already built.
declare -A already_built
# list of licenses
declare -A licenses

add_target() {
    local pkg=$1
    local build=$2
    [ -n "${fulltargets[$pkg]}" ] && \
        logerr "Target $pkg specified by ${fulltargets[$pkg]} and $build."
    fulltargets+=([$pkg]=$build)

    #
    # Repeatedly strip off leading components to generate all valid
    # names for this package. If more than one package has the same
    # abbreviated name, the first one wins.
    #
    fpkg=$pkg
    [ -n "${targets[$pkg]}" ] || targets+=([$pkg]=$fpkg)
    while [[ $pkg =~ '/' ]]; do
        pkg=${pkg#*/}
        [ -n "${targets[$pkg]}" ] || targets+=([$pkg]=$fpkg)
    done
}

extract_manifest_name() {
        nawk '/^set name=pkg.fmri/ {print $3}' $1 | sed -e '
            s/value=//
            s:.*//[^/]*/::g
            s/@.*//
        '
}

add_manifests() {
    for manifest in `find . -name \*.p5m | cut -c3-`; do
        [ -f `dirname $manifest`/.disabled ] && continue
        for PKG in `extract_manifest_name $manifest`; do
            add_target $PKG $manifest
        done
    done
}

extract_pkgs() {
    grep 'PKG=' $1 | grep -v '##IGNORE##' | sed -e '
        s/^ +//
        s/ +#.+//
        s/=/ /g
    ' | nawk '$1 == "PKG" { print $2 }'
}

add_buildscripts() {
    for build in `find . -name build\*.sh | cut -c3-`; do
        [ -f `dirname $build`/.disabled ] && continue
        for PKG in `extract_pkgs $build`; do
            add_target $PKG $build
        done
    done
}

add_targets() {
    add_manifests
    add_buildscripts
}

detect_licenses() {
    for build in `find . -name build\*.sh | cut -c3-`; do
        for PKG in $(grep -v '##IGNORE##' $build | \
            sed -e '
                s/^ +//
                s/ +#.+//
                s/=/ /g
                s/^.+make_package/make_package/g
      ' | nawk '
            $1 == "PKG" { PKG=$2 }
            $1 == "make_package" { print PKG"="$2 }
      '); do
            MOG=${PKG#*=}
            PKG=${PKG%=*}
            LOCALMOG="`dirname $build`/local.mog"
            [ -f $MOG ] || MOG=""
            [ -f $LOCALMOG ] || LOCALMOG=""
            LICENSE=`nawk '
                /"/ { gsub("\"", "") }
                /^license/ { print $3 }
                ' $MOG $LOCALMOG /dev/null | xargs`
            licenses+=([$PKG]=$LICENSE)
            print -f "."
        done
    done
}

: ${BUILT_CACHE:="`pwd`/built.cache"}

usage() {
    echo $0
    echo "    list [grep pattern]       (sorted alphabetically)"
    echo "    list-build [grep pattern] (sorted in build order)"
    echo "    licenses                  (audit licenses)"
    echo "    build <pkg>"
    echo "    build all"
    echo "    build continue            (continue interrupted build)"
    echo "    build from <pkg>          (build <pkg> then those after)"
    exit
}

bail() {
    echo $*
    exit
}

# Dependencies are limited at the moment. The only thing that matters is
# that kayak-kernel is built last. Build everything else in alphabetical
# order.
buildorder() {
    mapfile -d '' sorted < <( printf '%s\n' ${!fulltargets[@]} | sort | \
       grep -v kayak-kernel)
    for target in ${sorted[@]} system/install/kayak-kernel; do
        echo $target
    done
}

list_backend() {
    PAT=${1-.}
    for target in "${!fulltargets[@]}"; do
        if [ "$PAT" = "." ]; then
            echo $target
        else
            echo "$target" | egrep "$PAT"
        fi
    done | sort
}

list() {
    list_backend "${1-.}" | sed 's/^/ * /'
}

list_build() {
    PAT=${1-.}

    buildorder | while read target; do
        if [ "$PAT" = "." ]; then
            echo " * $target"
        else
            echo "$target" | egrep "$PAT"
        fi
    done
}

record_built() {
    already_built+=([$1]=1)
    echo $1 >> "$BUILT_CACHE"
}

clear_built() {
    [ -f "$BUILT_CACHE" ] && rm -f "$BUILT_CACHE"
}

restore_built() {
    [ -f "$BUILT_CACHE" ] || return
    for pkg in `cat "$BUILT_CACHE"`; do
        already_built+=([$pkg]=1)
    done
}

built_packages_p5m() {
    for PKG in `extract_manifest_name $1`; do
        record_built $PKG
    done
}

built_packages_sh() {
    for PKG in `extract_pkgs $1`; do
        record_built $PKG
    done
}

build() {
    if [ -n "${fulltargets[$1]}" ]; then
        buildtgt=$1
    elif [ -n "${targets[$1]}" ]; then
        buildtgt="${targets[$1]}"
        logmsg "--- $1 -> $buildtgt"
    else
        bail "Unknown package: $1"
    fi
    if [[ "${already_built[$buildtgt]}" = "1" ]]; then
        logmsg "--- Package $1 was already built."
    else
        BUILD=${fulltargets[$buildtgt]}
        DIR="`dirname $BUILD`"
        SCRIPT="`basename $BUILD`"
        pushd $DIR > /dev/null || bail "Cannot chdir to $DIR"
        PKGSRVR=$DEFAULT_PKGSRVR
        PKGPUBLISHER=$DEFAULT_PKGPUBLISHER
        PKGROOT=`pwd`/root
        if [ -f environment ]; then
            logmsg "--- Setting new environment"
            . environment
        fi
        if [[ "$SCRIPT" = *.p5m ]]; then
            init_repo
            echo "Found a manifest file. Preparing it for publishing."
            sed -e "
                    s/@PKGPUBLISHER@/$PKGPUBLISHER/g
                    s/@RELVER@/$RELVER/g
                    s/@PVER@/$PVER/g
                " < $SCRIPT > $SCRIPT.final
            if [ -f root.tar.bz2 ]; then
                echo "File archive found. Extracting..."
                bzip2 -dc root.tar.bz2 | tar xf - || \
                    bail "Failed to extract root.tar.bz2"
                echo "Publishing from $SCRIPT.final"
                pkgsend -s $PKGSRVR publish -d $PKGROOT $SCRIPT.final || \
                    bail "pkgsend failed"
                rm -rf $PKGROOT
            elif [ -d "$PKGROOT" ]; then
                # In case we just have a tree of files and not a tarball
                echo "Publishing from $SCRIPT.final"
                pkgsend -s $PKGSRVR publish -d $PKGROOT $SCRIPT.final || \
                    bail "pkgsend failed"
            else
                # Else we just have a manifest to import
                echo "Simple manifest to import... importing to $PKGSRVR"
                pkgsend -s $PKGSRVR publish $SCRIPT.final || \
                    bail "pkgsend failed"
                rm $SCRIPT.final
            fi
            built_packages_p5m $SCRIPT
        else
            PATH=$PATH:. $SCRIPT -r $PKGSRVR $batch_flag $lint_flag || \
                logerr "Unable to run $SCRIPT"
            built_packages_sh $SCRIPT
        fi
        popd >/dev/null
    fi
}

licenses() {
    detect_licenses
    echo
    for target in "${!licenses[@]}"
    do
        if [ -n "${licenses[$target]}" ]; then
            echo " * $target     -> ${licenses[$target]}"
        fi
    done | sort
    echo
    echo "=== Packages missing license information ==="
    for target in "${!licenses[@]}"
    do
        if [ -z "${licenses[$target]}" ]; then
            echo " * $target"
        fi
    done | sort
}

DEFAULT_PKGSRVR=$PKGSRVR
DEFAULT_PKGPUBLISHER=$PKGPUBLISHER

# When we get here, honor any -l or -b flags from the buildctl command line,
# or even the environment.

if [ "${BATCH}" = 1 ]; then
    logmsg "Enabling batch mode."
    batch_flag="-b"
fi
if [ "${SKIP_PKGLINT}" = 1 ]; then
    logmsg "Disabling pkglint."
    lint_flag="-l"
fi

case "$1" in
    list)
        add_targets
        list $2
        exit
        ;;

    list-build)
        add_targets
        list_build $2
        exit
        ;;

    licenses)
        licenses
        exit
        ;;

    build)
        add_targets
        shift
        tobuild="$*"

        skipuntil=
        if [ "$tobuild" = "continue" ]; then
            tobuild=all
            restore_built
        elif [[ "$tobuild" = from\ * ]]; then
            skipuntil=${tobuild#from }
            tobuild=all
            restore_built
        elif [ -z "$tobuild" -o "$tobuild" = all ]; then
            if [ -f "$BUILT_CACHE" -a -z "$BATCH" ]; then
                ask_to_continue_ "" \
                  "Built package cache will be cleared, continue?" \
                  "y/n" "[yYnN]"
                [ "$REPLY" == "y" -o "$REPLY" == "Y" ] || exit 1
            fi
            clear_built
        fi

        if [ -z "$tobuild" ] || [ "$tobuild" == "all" ]; then
            batch_flag="-b"

            pkgcount=${#fulltargets[@]}
            pkgnum=0
            for tgt in `buildorder`; do
                ((pkgnum = pkgnum + 1))

                [ -n "$skipuntil" -a "$skipuntil" != $tgt ] \
                    && continue || skipuntil=

                note "($pkgnum/$pkgcount) Building $tgt"
                build $tgt
            done
        else
            if [[ $tobuild = *\** ]]; then
                for tgtpatt in $tobuild; do
                    for tgt in `list_backend "$tgtpatt"`; do
                        note "Building $tgt"
                        build $tgt
                    done
                done
            else
                for tgt in $tobuild; do
                    note "Building $tgt"
                    build $tgt
                done
            fi
        fi
        exit
        ;;

    *)
        usage
        ;;
esac

# Vim hints
# vim:ts=4:sw=4:et:
